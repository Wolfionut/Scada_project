// index.js - Clean version to fix the path-to-regexp error
require('dotenv').config();
const express = require('express');
const http = require('http');
const cors = require('cors');

const app = express();

// CORS Configuration
const corsOptions = {
    origin: [
        'http://localhost:3000',
        'http://localhost:3001',
        'http://127.0.0.1:3000',
        'http://127.0.0.1:3001'
    ],
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
    optionsSuccessStatus: 200
};

// Apply CORS
app.use(cors(corsOptions));
app.options('*', cors(corsOptions));

// Basic middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// Request logging
app.use((req, res, next) => {
    console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
    next();
});

// Health check first (before other routes)
app.get('/health', (req, res) => {
    res.json({
        status: 'OK',
        timestamp: new Date().toISOString(),
        cors: 'Enabled'
    });
});

// Test endpoint
app.get('/api/test', (req, res) => {
    res.json({
        message: 'API is working!',
        timestamp: new Date().toISOString()
    });
});

// Routes - Let's add them one by one to identify the problematic one
try {
    console.log('Loading auth routes...');
    app.use('/api/auth', require('./routes/auth'));
    console.log('✅ Auth routes loaded');
} catch (error) {
    console.error('❌ Error loading auth routes:', error.message);
}

try {
    console.log('Loading projects routes...');
    app.use('/api/projects', require('./routes/projects'));
    console.log('✅ Projects routes loaded');
} catch (error) {
    console.error('❌ Error loading projects routes:', error.message);
}

try {
    console.log('Loading devices routes...');
    app.use('/api/devices', require('./routes/devices'));
    console.log('✅ Devices routes loaded');
} catch (error) {
    console.error('❌ Error loading devices routes:', error.message);
}

try {
    console.log('Loading tags routes...');
    app.use('/api/tags', require('./routes/tags'));
    console.log('✅ Tags routes loaded');
} catch (error) {
    console.error('❌ Error loading tags routes:', error.message);
}

try {
    console.log('Loading measurements routes...');
    app.use('/api/measurements', require('./routes/measurements'));
    console.log('✅ Measurements routes loaded');
} catch (error) {
    console.error('❌ Error loading measurements routes:', error.message);
}

try {
    console.log('Loading alarms routes...');
    app.use('/api/alarms', require('./routes/alarms'));
    console.log('✅ Alarms routes loaded');
} catch (error) {
    console.error('❌ Error loading alarms routes:', error.message);
}

try {
    console.log('Loading logs routes...');
    app.use('/api/logs', require('./routes/logs'));
    console.log('✅ Logs routes loaded');
} catch (error) {
    console.error('❌ Error loading logs routes:', error.message);
}

try {
    console.log('Loading diagrams routes...');
    app.use('/api/diagrams', require('./routes/diagrams'));
    console.log('✅ Diagrams routes loaded');
} catch (error) {
    console.error('❌ Error loading diagrams routes:', error.message);
}

try {
    console.log('Loading roles routes...');
    app.use('/api/roles', require('./routes/roles'));
    console.log('✅ Roles routes loaded');
} catch (error) {
    console.error('❌ Error loading roles routes:', error.message);
}

// Error handling middleware
app.use((err, req, res, next) => {
    console.error('Server error:', err);
    res.status(500).json({ error: 'Internal server error' });
});

// 404 handler
app.use('*', (req, res) => {
    res.status(404).json({ error: 'Route not found' });
});

// Create HTTP server
const server = http.createServer(app);

// Only add WebSocket if the file exists
try {
    const WebSocketManager = require('./websocket/websocketManager');
    const wsManager = new WebSocketManager(server);
    global.wsManager = wsManager;
    console.log('✅ WebSocket manager loaded');
} catch (error) {
    console.log('⚠️  WebSocket manager not found, skipping...');
}

const PORT = process.env.PORT || 4000;
server.listen(PORT, '0.0.0.0', () => {
    console.log(`🚀 Server running on http://localhost:${PORT}`);
    console.log(`🔗 API available at http://localhost:${PORT}/api`);
    console.log(`🌐 CORS enabled for React frontend`);
    console.log(`📋 Test the API: curl http://localhost:${PORT}/health`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('🛑 Received SIGTERM, shutting down gracefully');
    server.close(() => {
        console.log('✅ Server closed');
        process.exit(0);
    });
});

process.on('SIGINT', () => {
    console.log('🛑 Received SIGINT, shutting down gracefully');
    server.close(() => {
        console.log('✅ Server closed');
        process.exit(0);
    });
});

module.exports = { server };